############################################################## USAGE ###########################################################
#
#  Run   : samtools view <INPUT_1.bam> | python find_unique_perfect.py
#   
#  INPUT :  
#  <INPUT_1.bam> is the bam file for which you want to get alignment statistics
#  
#  OUTPUT :
#  stats.txt - The output file containing information about total reads mappped , total unique and perfect reads
#
#  DESCRIPTION :
#  This python script is used to gather statistics about unique and perfectly mapped reads from a bam file generated by bowtie2 and mapped in unpaired fashion (single-end mode)  
##################################################################################################################################

import sys
import re

fout = open("stats.txt","w")

unique=0
perfect=0
total_mapped=0
total_reads=0

PROCESSED=0

for line in sys.stdin:

    if line[0]=="@":
        continue

    cols = re.split("\t|\n",line)

    col_11=cols[11]
    col_11_field = re.split(":",col_11)

    #print col_11_field[0]


    if col_11_field[0]=="AS":       # Its a valid read and the read has some alignment somwhere in the genome
 
        col_12 = cols[12]
        col_12_field = re.split(":",col_12)

        if col_12_field[0] != "XS":    # It is a unique mapping entirely  
        
            primary_alignment_score = int(col_11_field[2])

            if primary_alignment_score == 0:     # It is unique as well as perfect
                perfect = perfect + 1   
                unique  = unique  + 1                  
                
            else:
                unique  = unique + 1
                
        else:                          # More than one mapping is there 

            primary_alignment_score = int(col_11_field[2])
            secondary_alignment_score = int(col_12_field[2])

            if primary_alignment_score > secondary_alignment_score:

                if primary_alignment_score == 0:      # It is unique as well as perfect
                    perfect = perfect + 1   
                    unique  = unique  + 1
                                                          

                else:
                    unique  = unique + 1
                   

        total_mapped = total_mapped + 1


    total_reads = total_reads + 1 

    PROCESSED = PROCESSED + 1

    if (PROCESSED%10000000) == 0:
        print "Processed   ",PROCESSED
        
    
str_print = "Total   Reads         :  " + str(total_reads) + "\n"
fout.write(str_print)

str_print = "Total   Mapped Reads  :  " + str(total_mapped) + "\n"
fout.write(str_print)

str_print = "Unique  Reads         :  " + str(unique) + "\n"
fout.write(str_print)

str_print = "Perfect Reads         :  " + str(perfect) + "\n"
fout.write(str_print)



